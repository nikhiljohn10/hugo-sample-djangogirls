'use strict';(function(){const indexCfg={cache:true};indexCfg.doc={id:'id',field:['title','content'],store:['title','href','section'],};const index=FlexSearch.create('balance',indexCfg);window.bookSearchIndex=index;index.add({'id':0,'href':'/installation/','title':"Installation",'section':"Welcome",'content':"Installation #  If you\u0026rsquo;re doing the tutorial at home #  If you\u0026rsquo;re doing the tutorial at home, not at one of the Django Girls events, you can completely skip this chapter now and go straight to the How the Internet works chapter.\nThis is because we cover installing things as they are needed in the tutorial \u0026ndash; this is just an additional page that gathers all of the installation instructions in one place (which is useful for some workshop formats). You can choose to install everything that is on this page right now if you wish. But if you want to start learning things before installing a bunch of stuff on your computer, skip this chapter and we will explain the installation parts to you later on, as they are needed.\nGood luck!\nIf you\u0026rsquo;re attending a workshop #  If you are attending one of the Django Girls events:\n Your workshop may have an \u0026ldquo;installation party\u0026rdquo; before the main workshop. If you are at an installation party, this page is for you! Follow the instructions here to get everything you need for the workshop installed, with the help of the coaches if needed. Then at the main workshop, you\u0026rsquo;ll be able to skip installation instructions you\u0026rsquo;ll encounter in the main tutorial when you get to them. The organizers of your workshop may have asked you to try at home to install everything on your computer before the workshop starts. If you have been asked to do that, this page is for you! Follow the instructions here, as best you can. Then at the main workshop, when you get to an installation step in the main tutorial, if you were not able to get that piece installed you can get help from your coach. If your workshop does not have an installation party (or you couldn\u0026rsquo;t attend), and if the organizers didn\u0026rsquo;t ask you to try to install everything before you arrived, skip this page and go straight to the How the Internet works chapter. You\u0026rsquo;ll be installing everything you need as you work through the tutorial.  Installation #  In this tutorial you will be building a blog. In order to do that, as you go through the tutorial you\u0026rsquo;ll be instructed on how to install various software on your computer and set up some online accounts as they are needed. This page gathers all of the installation and sign-up instructions in one place (which is useful for some workshop formats).\nIf you are using Chromebook, you need to setup Chromebook before proceeding.\nBrief intro to the command line #  Many of the steps below reference the \u0026ldquo;console\u0026rdquo;, \u0026ldquo;terminal\u0026rdquo;, \u0026ldquo;command window\u0026rdquo;, or \u0026ldquo;command line\u0026rdquo; \u0026ndash; these all mean the same thing: a window on your computer where you can enter commands. When you get to the main tutorial, you\u0026rsquo;ll learn more about the command line. For now, the main thing you need to know is how to open a command window and what it looks like.\nIntroduction to Commandline #  Install Python #  Install a code editor #  Set up virtualenv and install Django #  Install Git #  Create a GitHub account #  Create a PythonAnywhere account #  Start reading #  Congratulations, you are all set up and ready to go! If you still have some time before the workshop, it would be useful to start reading a few of the beginning chapters:\n  How the internet works\n  Introduction to the command line\n  Introduction to Python\n  What is Django?\n  Enjoy the workshop! #  When you begin the workshop, you\u0026rsquo;ll be able to go straight to Your first Django project! because you already covered the material in the earlier chapters.\n"});index.add({'id':1,'href':'/installation/chromebook/','title':"Chromebook",'section':"Installation",'content':"Chromebook Setup #   Note If you already worked through the Installation steps, no need to do this again – you can skip straight ahead to Introduction to Python.\n You can skip right over this section if you\u0026rsquo;re not using a Chromebook. If you are, your installation experience will be a little different. You can ignore the rest of the installation instructions.\nCloud IDE (PaizaCloud Cloud IDE, AWS Cloud9) #  Cloud IDE is a tool that gives you a code editor and access to a computer running on the Internet where you can install, write, and run the software. For the duration of the tutorial, cloud IDE will act as your local machine. You\u0026rsquo;ll still be running commands in a terminal interface just like your classmates on OS X, Ubuntu, or Windows, but your terminal will be connected to a computer running somewhere else that cloud IDE sets up for you. Here is the instructions for cloud IDEs (PaizaCloud Cloud IDE, AWS Cloud9). You can choose one of the cloud IDEs, and follow the instruction of the cloud IDE.\nPaizaCloud Cloud IDE #   Go to PaizaCloud Cloud IDE Sign up for an account Click New Server and choose the Django app Click Terminal button(on the left side of the window)  Now you should see an interface with a sidebar, buttons at the left. Click \u0026ldquo;Terminal\u0026rdquo; button to open terminal window with prompt like this:\nTerminal\n$ The terminal on the PaizaCloud Cloud IDE is prepared for your instructions. You can resize or maximize that window to make it a bit bigger.\nAWS Cloud9 #  Currently Cloud 9 requires you to sign up with AWS and enter credit card information.\n Install Cloud 9 from the Chrome web store Go to c9.io and click Get started with AWS Cloud9 Sign up for an AWS account (requires credit card information, but you can use it for free) In the AWS Dashboard, enter Cloud9 in the search bar and click it In the Cloud 9 dashboard, click Create environment Name it django-girls While configuring settings, select Create a new instance for environment (EC2) for \u0026ldquo;Environment Type\u0026rdquo; and the t2.micro \u0026ldquo;Instance type\u0026rdquo; (it should say \u0026ldquo;Free-tier eligible.\u0026quot;). The default cost-saving setting is fine and you can keep the other defaults. Click Next step Click Create environment  Now you should see an interface with a sidebar, a big main window with some text, and a small window at the bottom that looks something like this:\nBash\nyourusername:~/workspace $ This bottom area is your terminal. You can use the terminal to send instructions to the remote Cloud 9 computer. You can resize that window to make it a bit bigger.\nVirtual Environment #  A virtual environment (also called a virtualenv) is like a private box we can stuff useful computer code into for a project we\u0026rsquo;re working on. We use them to keep the various bits of code we want for our various projects separate so things don\u0026rsquo;t get mixed up between projects.\nRun:\nCloud 9\nmkdir djangogirls cd djangogirls python3 -m venv myvenv source myvenv/bin/activate pip install django~={{ book.django_version }} (note that on the last line we use a tilde followed by an equal sign: ~=).\nGitHub #  Make a GitHub account.\nPythonAnywhere #  The Django Girls tutorial includes a section on what is called Deployment, which is the process of taking the code that powers your new web application and moving it to a publicly accessible computer (called a server) so other people can see your work.\nThis part is a little odd when doing the tutorial on a Chromebook since we\u0026rsquo;re already using a computer that is on the Internet (as opposed to, say, a laptop). However, it\u0026rsquo;s still useful, as we can think of our Cloud 9 workspace as a place for our \u0026ldquo;in progress\u0026rdquo; work and Python Anywhere as a place to show off our stuff as it becomes more complete.\nThus, sign up for a new Python Anywhere account at www.pythonanywhere.com.\n"});index.add({'id':2,'href':'/installation/command_line/','title':"Command Line",'section':"Installation",'content':"Introduction to the command-line interface #   For readers at home: this chapter is covered in the Your new friend: Command Line video.\n It\u0026rsquo;s exciting, right?! You\u0026rsquo;ll write your first line of code in just a few minutes! :)\nLet us introduce you to your first new friend: the command line!\nThe following steps will show you how to use the black window all hackers use. It might look a bit scary at first but really it\u0026rsquo;s just a prompt waiting for commands from you.\n Note Please note that throughout this book we use the terms \u0026lsquo;directory\u0026rsquo; and \u0026lsquo;folder\u0026rsquo; interchangeably but they are one and the same thing.\n What is the command line? #  The window, which is usually called the command line or command-line interface, is a text-based application for viewing, handling, and manipulating files on your computer. It\u0026rsquo;s much like Windows Explorer or Finder on the Mac, but without the graphical interface. Other names for the command line are: cmd, CLI, prompt, console or terminal.\nOpen the command-line interface #  To start some experiments we need to open our command-line interface first.\nDepending on your version of Windows and your keyboard, one of the following should open a command window (you may have to experiment a bit, but you don\u0026rsquo;t have to try all of these suggestions):\n Go to the Start menu or screen, and enter \u0026ldquo;Command Prompt\u0026rdquo; in the search field. Go to Start menu → Windows System → Command Prompt. Go to Start menu → All Programs → Accessories → Command Prompt. Go to the Start screen, hover your mouse in the lower-left corner of the screen, and click the down arrow that appears (on a touch screen, instead flick up from the bottom of the screen). The Apps page should open. Click on Command Prompt in the Windows System section. Hold the special Windows key on your keyboard and press the \u0026ldquo;X\u0026rdquo; key. Choose \u0026ldquo;Command Prompt\u0026rdquo; from the pop-up menu. Hold the Windows key and press the \u0026ldquo;R\u0026rdquo; key to get a \u0026ldquo;Run\u0026rdquo; window. Type \u0026ldquo;cmd\u0026rdquo; in the box, and click the OK key.  Later in this tutorial, you will need to have two command windows open at the same time. However, on some versions of Windows, if you already have one command window open and you try to open a second one using the same method, it will instead point you to the command window you already have open. Try it now on your computer and see what happens! If you only get one command window, try one of the other methods in the list above. At least one of them should result in a new command window being opened.\nGo to Applications → Utilities → Terminal.\nIt\u0026rsquo;s probably under Applications → Accessories → Terminal, or Applications → System → Terminal, but that may depend on your system. If it\u0026rsquo;s not there, you can try to Google it. :)\nPrompt #  You now should see a white or black window that is waiting for your commands.\nIf you\u0026rsquo;re on Mac or Linux, you probably see a $, like this:\ncommand-line\n$ On Windows, you probably see a \u0026gt;, like this:\ncommand-line\n\u0026gt; Take a look at the Linux section just above now \u0026ndash; you\u0026rsquo;ll see something more like that when you get to PythonAnywhere later in the tutorial.\nEach command will be prepended by a $ or \u0026gt; and one space, but you should not type it. Your computer will do it for you. :)\n Just a small note: in your case there may be something like C:\\Users\\ola\u0026gt; or Olas-MacBook-Air:~ ola$ before the prompt sign, and this is 100% OK.\n The part up to and including the $ or the \u0026gt; is called the command line prompt, or prompt for short. It prompts you to input something there.\nIn the tutorial, when we want you to type in a command, we will include the $ or \u0026gt;, and occasionally more to the left. Ignore the left part and only type in the command, which starts after the prompt.\nYour first command (YAY!) #  Let\u0026rsquo;s start by typing this command:\ncommand-line\n$ whoami command-line\n\u0026gt; whoami And then hit enter. This is our result:\ncommand-line\n$ whoami olasitarska As you can see, the computer has just printed your username. Neat, huh? :)\n Try to type each command; do not copy-paste. You\u0026rsquo;ll remember more this way!\n Basics #  Each operating system has a slightly different set of commands for the command line, so make sure to follow instructions for your operating system. Let\u0026rsquo;s try this, shall we?\nCurrent directory #  It\u0026rsquo;d be nice to know where are we now, right? Let\u0026rsquo;s see. Type this command and hit enter:\ncommand-line\n$ pwd /Users/olasitarska  Note: \u0026lsquo;pwd\u0026rsquo; stands for \u0026lsquo;print working directory\u0026rsquo;.\n command-line\n\u0026gt; cd C:\\Users\\olasitarska  Note: \u0026lsquo;cd\u0026rsquo; stands for \u0026lsquo;change directory\u0026rsquo;. With powershell you can use pwd just like on Linux or Mac OS X.\n You\u0026rsquo;ll probably see something similar on your machine. Once you open the command line you usually start at your user\u0026rsquo;s home directory.\n Learn more about a command #  Many commands you can type at the command prompt have built-in help that you can display and read! For example, to learn more about the current directory command:\nOS X and Linux have a man command, which gives you help on commands. Try man pwd and see what it says, or put man before other commands to see their help. The output of man is normally paged. Use the space bar to move to the next page, and q to quit looking at the help.\nAdding a /? suffix to most commands will print the help page. You may need to scroll your command window up to see it all. Try cd /?.\nList files and directories #  So what\u0026rsquo;s in it? It\u0026rsquo;d be cool to find out. Let\u0026rsquo;s see:\ncommand-line\n$ ls Applications Desktop Downloads Music ... command-line\n\u0026gt; dir Directory of C:\\Users\\olasitarska 05/08/2014 07:28 PM \u0026lt;DIR\u0026gt; Applications 05/08/2014 07:28 PM \u0026lt;DIR\u0026gt; Desktop 05/08/2014 07:28 PM \u0026lt;DIR\u0026gt; Downloads 05/08/2014 07:28 PM \u0026lt;DIR\u0026gt; Music ...  Note: In powershell you can also use \u0026lsquo;ls\u0026rsquo; like on Linux and Mac OS X.\n  Change current directory #  Now, let\u0026rsquo;s go to our Desktop directory:\ncommand-line\n$ cd Desktop command-line\n$ cd Desktop Note that the directory name \u0026ldquo;Desktop\u0026rdquo; might be translated to the language of your Linux account. If that\u0026rsquo;s the case, you\u0026rsquo;ll need to replace Desktop with the translated name; for example, Schreibtisch for German.\ncommand-line\n\u0026gt; cd Desktop Check if it\u0026rsquo;s really changed:\ncommand-line\n$ pwd /Users/olasitarska/Desktop command-line\n\u0026gt; cd C:\\Users\\olasitarska\\Desktop Here it is!\n PRO tip: if you type cd D and then hit tab on your keyboard, the command line will automatically fill in the rest of the name so you can navigate faster. If there is more than one folder starting with \u0026ldquo;D\u0026rdquo;, hit the tab key twice to get a list of options.\n  Create directory #  How about creating a practice directory on your desktop? You can do it this way:\ncommand-line\n$ mkdir practice command-line\n\u0026gt; mkdir practice This little command will create a folder with the name practice on your desktop. You can check if it\u0026rsquo;s there by looking on your Desktop or by running a ls or dir command! Try it. :)\n PRO tip: If you don\u0026rsquo;t want to type the same commands over and over, try pressing the up arrow and down arrow on your keyboard to cycle through recently used commands.\n  Exercise! #  A small challenge for you: in your newly created practice directory, create a directory called test. (Use the cd and mkdir commands.)\nSolution: #  command-line\n$ cd practice $ mkdir test $ ls test command-line\n\u0026gt; cd practice \u0026gt; mkdir test \u0026gt; dir 05/08/2014 07:28 PM \u0026lt;DIR\u0026gt; test Congrats! :)\n Clean up #  We don\u0026rsquo;t want to leave a mess, so let\u0026rsquo;s remove everything we did until that point.\nFirst, we need to get back to Desktop:\ncommand-line\n$ cd .. command-line\n\u0026gt; cd .. Using .. with the cd command will change your current directory to the parent directory (that is, the directory that contains your current directory).\nCheck where you are:\ncommand-line\n$ pwd /Users/olasitarska/Desktop command-line\n\u0026gt; cd C:\\Users\\olasitarska\\Desktop Now time to delete the practice directory:\n Attention: Deleting files using del, rmdir or rm is irrecoverable, meaning the deleted files will be gone forever! So be very careful with this command.\n command-line\n$ rm -r practice command-line\n\u0026gt; rmdir /S practice practice, Are you sure \u0026lt;Y/N\u0026gt;? Y Done! To be sure it\u0026rsquo;s actually deleted, let\u0026rsquo;s check it:\ncommand-line\n$ ls command-line\n\u0026gt; dir Exit #  That\u0026rsquo;s it for now! You can safely close the command line now. Let\u0026rsquo;s do it the hacker way, alright? :)\ncommand-line\n$ exit command-line\n\u0026gt; exit Cool, huh? :)\nSummary #  Here is a summary of some useful commands:\n   Command (Windows) Command (Mac OS / Linux) Description Example     exit exit close the window exit   cd cd change directory cd test   cd pwd show the current directory cd (Windows) or pwd (Mac OS / Linux)   dir ls list directories/files dir   copy cp copy file copy c:\\test\\test.txt c:\\windows\\test.txt   move mv move file move c:\\test\\test.txt c:\\windows\\test.txt   mkdir mkdir create a new directory mkdir testdirectory   rmdir (or del) rm delete a file del c:\\test\\test.txt   rmdir /S rm -r delete a directory rm -r testdirectory   [CMD] /? man [CMD] get help for a command cd /? (Windows) or man cd (Mac OS / Linux)    These are just a very few of the commands you can run in your command line, but you\u0026rsquo;re not going to use anything more than that today.\nIf you\u0026rsquo;re curious, ss64.com contains a complete reference of commands for all operating systems.\nReady? #  Let\u0026rsquo;s dive into Python!\n"});index.add({'id':3,'href':'/installation/python/','title':"Python",'section':"Installation",'content':"Python #  Let’s start with Python #  We\u0026rsquo;re finally here!\nBut first, let us tell you what Python is. Python is a very popular programming language that can be used for creating websites, games, scientific software, graphics, and much, much more.\nPython originated in the late 1980s and its main goal is to be readable by human beings (not only machines!). This is why it looks simpler than other programming languages, but don\u0026rsquo;t worry – Python is also really powerful!\nPython installation #   Note If you\u0026rsquo;re using a Chromebook, skip this chapter and make sure you follow the Chromebook Setup instructions.\n  Note If you already worked through the Installation steps, there\u0026rsquo;s no need to do this again – you can skip straight ahead to the next chapter!\n  For readers at home: this chapter is covered in the Installing Python \u0026amp; Code Editor video.\n  This section is based on a tutorial by Geek Girls Carrots (https://github.com/ggcarrots/django-carrots)\n Django is written in Python. We need Python to do anything in Django. Let\u0026rsquo;s start by installing it! We want you to install the latest version of Python 3, so if you have any earlier version, you will need to upgrade it. If you already have version {{ book.py_min_version }} or higher you should be fine.\nPlease install normal Python as follows, even when you have Anaconda installed on your computer.\nFirst check whether your computer is running a 32-bit version or a 64-bit version of Windows, on the \u0026ldquo;System type\u0026rdquo; line of the System Info page. To reach this page, try one of these methods:\n Press the Windows key and Pause/Break key at the same time Open your Control Panel from the Windows menu, then navigate to System \u0026amp; Security, then System Press the Windows button, then navigate to Settings \u0026gt; System \u0026gt; About Search the Windows Start menu for \u0026ldquo;System Information\u0026rdquo;. To do that, click the Start button or press the Windows key, then begin to type System Information. It will start making suggestions as soon as you type. You can select the entry once it shows up.  You can download Python for Windows from the website https://www.python.org/downloads/windows/. Click on the \u0026ldquo;Latest Python 3 Release - Python x.x.x\u0026rdquo; link. If your computer is running a 64-bit version of Windows, download the Windows x86-64 executable installer. Otherwise, download the Windows x86 executable installer. After downloading the installer, you should run it (double-click on it) and follow the instructions there.\nOne thing to watch out for: During the installation, you will notice a window marked \u0026ldquo;Setup\u0026rdquo;. Make sure you tick the \u0026ldquo;Add Python {{ book.py_version }} to PATH\u0026rdquo; or \u0026lsquo;Add Python to your environment variables\u0026quot; checkbox and click on \u0026ldquo;Install Now\u0026rdquo;, as shown here (it may look a bit different if you are installing a different version):\nWhen the installation completes, you may see a dialog box with a link you can follow to learn more about Python or about the version you installed. Close or cancel that dialog \u0026ndash; you\u0026rsquo;ll be learning more in this tutorial!\nNote: If you are using an older version of Windows (7, Vista, or any older version) and the Python {{ book.py_version }} installer fails with an error, then install all Windows Updates and try to install Python again. If you still have the error, try installing Python version {{ book.py_min_version }} from Python.org.\n Django {{ book.django_version }} needs Python {{ book.py_min_version }} or greater, which does not support Windows XP or earlier versions.\n  Note Before you install Python on OS X, you should ensure your Mac settings allow installing packages that aren\u0026rsquo;t from the App Store. Go to System Preferences (it\u0026rsquo;s in the Applications folder), click \u0026ldquo;Security \u0026amp; Privacy,\u0026rdquo; and then the \u0026ldquo;General\u0026rdquo; tab. If your \u0026ldquo;Allow apps downloaded from:\u0026rdquo; is set to \u0026ldquo;Mac App Store,\u0026rdquo; change it to \u0026ldquo;Mac App Store and identified developers.\u0026rdquo;\n You need to go to the website https://www.python.org/downloads/mac-osx/ and download the latest Python installer:\n Download the Mac OS X 64-bit/32-bit installer file, Double click python-{{ book.py_release }}-macosx10.9.pkg to run the installer.  It is very likely that you already have Python installed out of the box. To check if you have it installed (and which version it is), open a console and type the following command:\n{% filename %}command-line{% endfilename %}\n$ python3 --version Python {{ book.py_release }} If you have a different version of Python installed, at least {{ book.py_min_version }} (e.g. {{ book.py_release }}), then you don\u0026rsquo;t have to upgrade. If you don\u0026rsquo;t have Python installed, or if you want a different version, first check what Linux distribution you are using with the following command:\n{% filename %}command-line{% endfilename %}\n$ grep '^NAME=' /etc/os-release Afterwards, depending on the result, follow one of the following installation guides below this section.\nType this command into your console:\n{% filename %}command-line{% endfilename %}\n$ sudo apt install python3 Use this command in your console:\n{% filename %}command-line{% endfilename %}\n$ sudo dnf install python3 If you\u0026rsquo;re on older Fedora versions you might get an error that the command dnf is not found. In that case, you need to use yum instead.\nUse this command in your console:\n{% filename %}command-line{% endfilename %}\n$ sudo zypper install python3 Verify the installation was successful by opening a command prompt and running the python3 command:\n{% filename %}command-line{% endfilename %}\n$ python3 --version Python {{ book.py_release }} The version shown may be different from {{ book.py_release }} \u0026ndash; it should match the version you installed.\nNOTE: If you\u0026rsquo;re on Windows and you get an error message that python3 wasn\u0026rsquo;t found, try using python (without the 3) and check if it still might be a version of Python that is {{ book.py_min_version }} or higher. If that doesn\u0026rsquo;t work either, you may open a new command prompt and try again; this happens if you use a command prompt left open from before the Python installation.\n If you have any doubts, or if something went wrong and you have no idea what to do next, please ask your coach! Sometimes things don\u0026rsquo;t go smoothly and it\u0026rsquo;s better to ask for help from someone with more experience.\n"});index.add({'id':4,'href':'/installation/code_editor/','title':"Code Editor",'section':"Installation",'content':"Code editor #   For readers at home: this chapter is covered in the Installing Python \u0026amp; Code Editor video.\n You\u0026rsquo;re about to write your first line of code, so it\u0026rsquo;s time to download a code editor!\n Note If you\u0026rsquo;re using a Chromebook, skip this chapter and make sure you follow the Chromebook Setup instructions. The cloud IDE you chose (PaizaCloud Cloud IDE or AWS Cloud9) includes a code editor, and when you open a file in your IDE from the File menu, you will automatically be using the editor.\n  Note You might have done this earlier in the Installation chapter – if so, you can skip right ahead to the next chapter!\n There are a lot of different editors and it largely boils down to personal preference. Most Python programmers use complex but extremely powerful IDEs (Integrated Development Environments), such as PyCharm. As a beginner, however, that\u0026rsquo;s probably less suitable; our recommendations are equally powerful, but a lot simpler.\nOur suggestions are below, but feel free to ask your coach what their preferences are – it\u0026rsquo;ll be easier to get help from them.\nVisual Studio Code #  Visual Studio Code is a source code editor developed by Microsoft for Windows, Linux and macOS. It includes support for debugging, embedded Git control, syntax highlighting, intelligent code completion, snippets, and code refactoring.\nDownload it here\nGedit #  Gedit is an open-source, free editor, available for all operating systems.\nDownload it here\nSublime Text 3 #  Sublime Text is a very popular editor with a free evaluation period and it\u0026rsquo;s available for all operating systems.\nDownload it here\nAtom #  Atom is another popular editor. It\u0026rsquo;s free, open-source and available for Windows, OS X and Linux. Atom is developed by GitHub.\nDownload it here\nWhy are we installing a code editor? #  You might be wondering why we are installing this special code editor software, rather than using something like Word or Notepad.\nThe first reason is that code needs to be plain text, and the problem with programs like Word and Textedit is that they don\u0026rsquo;t actually produce plain text, they produce rich text (with fonts and formatting), using custom formats like RTF (Rich Text Format).\nThe second reason is that code editors are specialized for editing code, so they can provide helpful features like highlighting code with color according to its meaning, or automatically closing quotes for you.\nWe\u0026rsquo;ll see all this in action later. Soon, you\u0026rsquo;ll come to think of your trusty old code editor as one of your favorite tools. :)\n"});index.add({'id':5,'href':'/installation/virtualenv/','title':"Virtual Environment",'section':"Installation",'content':"Virtual environment #  Getting started #  Before we install Django we will get you to install an extremely useful tool to help keep your coding environment tidy on your computer. It\u0026rsquo;s possible to skip this step, but it\u0026rsquo;s highly recommended. Starting with the best possible setup will save you a lot of trouble in the future!\nSo, let\u0026rsquo;s create a virtual environment (also called a virtualenv). Virtualenv will isolate your Python/Django setup on a per-project basis. This means that any changes you make to one website won\u0026rsquo;t affect any others you\u0026rsquo;re also developing. Neat, right?\nAll you need to do is find a directory in which you want to create the virtualenv; your home directory, for example. On Windows, it might look like C:\\Users\\Name\\ (where Name is the name of your login).\n NOTE: On Windows, make sure that this directory does not contain accented or special characters; if your username contains accented characters, use a different directory, for example, C:\\djangogirls.\n For this tutorial we will be using a new directory djangogirls from your home directory:\n{% filename %}command-line{% endfilename %}\n$ mkdir djangogirls $ cd djangogirls We will make a virtualenv called myvenv. The general command will be in the format:\n{% filename %}command-line{% endfilename %}\n$ python3 -m venv myvenv To create a new virtualenv, you need to open the command prompt and run python -m venv myvenv. It will look like this:\n{% filename %}command-line{% endfilename %}\nC:\\Users\\Name\\djangogirls\u0026gt; python -m venv myvenv Where myvenv is the name of your virtualenv. You can use any other name, but stick to lowercase and use no spaces, accents or special characters. It is also good idea to keep the name short – you\u0026rsquo;ll be referencing it a lot!\nWe can create a virtualenv on both Linux and OS X by running python3 -m venv myvenv. It will look like this:\n{% filename %}command-line{% endfilename %}\n$ python3 -m venv myvenv myvenv is the name of your virtualenv. You can use any other name, but stick to lowercase and use no spaces. It is also a good idea to keep the name short as you\u0026rsquo;ll be referencing it a lot!\n NOTE: On some versions of Debian/Ubuntu you may receive the following error:\n  {% filename %}command-line{% endfilename %}\nThe virtual environment was not created successfully because ensurepip is not available. On Debian/Ubuntu systems, you need to install the python3-venv package using the following command. apt install python3-venv You may need to use sudo with that command. After installing the python3-venv package, recreate your virtual environment. In this case, follow the instructions above and install the python3-venv package: {% filename %}command-line{% endfilename %}\n$ sudo apt install python3-venv   NOTE: On some versions of Debian/Ubuntu initiating the virtual environment like this currently gives the following error:\n  {% filename %}command-line{% endfilename %}\nError: Command '['/home/eddie/Slask/tmp/venv/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1   To get around this, use the virtualenv command instead.\n  {% filename %}command-line{% endfilename %}\n$ sudo apt install python-virtualenv $ virtualenv --python=python3.6 myvenv   NOTE: If you get an error like\n  {% filename %}command-line{% endfilename %}\nE: Unable to locate package python3-venv   then instead run:\n{% filename %}command-line{% endfilename %}\nsudo apt install python3.6-venv  Working with virtualenv #  The command above will create a directory called myvenv (or whatever name you chose) that contains our virtual environment (basically a bunch of directory and files).\nStart your virtual environment by running:\n{% filename %}command-line{% endfilename %}\nC:\\Users\\Name\\djangogirls\u0026gt; myvenv\\Scripts\\activate  NOTE: on Windows 10 you might get an error in the Windows PowerShell that says execution of scripts is disabled on this system. In this case, open another Windows PowerShell with the \u0026ldquo;Run as Administrator\u0026rdquo; option. Then try typing the following command before starting your virtual environment:\n{% filename %}command-line{% endfilename %}\nC:\\WINDOWS\\system32\u0026gt; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned Execution Policy Change The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at http://go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy? [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \u0026quot;N\u0026quot;): A   NOTE: For users of the popular editor VS Code, which come with an integrated terminal based off windows powershell, if you wish to stick with the integrated terminal, you may run the following command to activate your virtual environment:\n$ . myvenv\\Scripts\\activate.ps1 The advantage is that you don\u0026rsquo;t have to switch between editor windows and command-line windows\n Start your virtual environment by running:\n{% filename %}command-line{% endfilename %}\n$ source myvenv/bin/activate Remember to replace myvenv with your chosen virtualenv name!\n NOTE: sometimes source might not be available. In those cases try doing this instead:\n{% filename %}command-line{% endfilename %}\n$ . myvenv/bin/activate  You will know that you have virtualenv started when you see that the prompt in your console is prefixed with (myvenv).\nWhen working within a virtual environment, python will automatically refer to the correct version so you can use python instead of python3.\nOK, we have all important dependencies in place. We can finally install Django!\n"});index.add({'id':6,'href':'/installation/django/','title':"Django",'section':"Installation",'content':"Django installation #   Note If you\u0026rsquo;re using a Chromebook, skip this chapter and make sure you follow the Chromebook Setup instructions.\n  Note If you already worked through the Installation steps then you\u0026rsquo;ve already done this – you can go straight to the next chapter!\n  Part of this section is based on tutorials by Geek Girls Carrots (https://github.com/ggcarrots/django-carrots).\n  Part of this section is based on the django-marcador tutorial licensed under the Creative Commons Attribution-ShareAlike 4.0 International License. The django-marcador tutorial is copyrighted by Markus Zapke-Gründemann et al.\n Virtual environment #  Before we install Django we will get you to install an extremely useful tool to help keep your coding environment tidy on your computer. It\u0026rsquo;s possible to skip this step, but it\u0026rsquo;s highly recommended. Starting with the best possible setup will save you a lot of trouble in the future!\nSo, let\u0026rsquo;s create a virtual environment (also called a virtualenv). Virtualenv will isolate your Python/Django setup on a per-project basis. This means that any changes you make to one website won\u0026rsquo;t affect any others you\u0026rsquo;re also developing. Neat, right?\nAll you need to do is find a directory in which you want to create the virtualenv; your home directory, for example. On Windows, it might look like C:\\Users\\Name\\ (where Name is the name of your login).\n NOTE: On Windows, make sure that this directory does not contain accented or special characters; if your username contains accented characters, use a different directory, for example, C:\\djangogirls.\n For this tutorial we will be using a new directory djangogirls from your home directory:\n{% filename %}command-line{% endfilename %}\n$ mkdir djangogirls $ cd djangogirls We will make a virtualenv called myvenv. The general command will be in the format:\n{% filename %}command-line{% endfilename %}\n$ python3 -m venv myvenv To create a new virtualenv, you need to open the command prompt and run python -m venv myvenv. It will look like this:\n{% filename %}command-line{% endfilename %}\nC:\\Users\\Name\\djangogirls\u0026gt; python -m venv myvenv Where myvenv is the name of your virtualenv. You can use any other name, but stick to lowercase and use no spaces, accents or special characters. It is also good idea to keep the name short – you\u0026rsquo;ll be referencing it a lot!\nWe can create a virtualenv on both Linux and OS X by running python3 -m venv myvenv. It will look like this:\n{% filename %}command-line{% endfilename %}\n$ python3 -m venv myvenv myvenv is the name of your virtualenv. You can use any other name, but stick to lowercase and use no spaces. It is also a good idea to keep the name short as you\u0026rsquo;ll be referencing it a lot!\n NOTE: On some versions of Debian/Ubuntu you may receive the following error:\n  {% filename %}command-line{% endfilename %}\nThe virtual environment was not created successfully because ensurepip is not available. On Debian/Ubuntu systems, you need to install the python3-venv package using the following command. apt install python3-venv You may need to use sudo with that command. After installing the python3-venv package, recreate your virtual environment. In this case, follow the instructions above and install the python3-venv package: {% filename %}command-line{% endfilename %}\n$ sudo apt install python3-venv   NOTE: On some versions of Debian/Ubuntu initiating the virtual environment like this currently gives the following error:\n  {% filename %}command-line{% endfilename %}\nError: Command '['/home/eddie/Slask/tmp/venv/bin/python3', '-Im', 'ensurepip', '--upgrade', '--default-pip']' returned non-zero exit status 1   To get around this, use the virtualenv command instead.\n  {% filename %}command-line{% endfilename %}\n$ sudo apt install python-virtualenv $ virtualenv --python=python3.6 myvenv   NOTE: If you get an error like\n  {% filename %}command-line{% endfilename %}\nE: Unable to locate package python3-venv   then instead run:\n{% filename %}command-line{% endfilename %}\nsudo apt install python3.6-venv  Working with virtualenv #  The command above will create a directory called myvenv (or whatever name you chose) that contains our virtual environment (basically a bunch of directory and files).\nStart your virtual environment by running:\n{% filename %}command-line{% endfilename %}\nC:\\Users\\Name\\djangogirls\u0026gt; myvenv\\Scripts\\activate  NOTE: on Windows 10 you might get an error in the Windows PowerShell that says execution of scripts is disabled on this system. In this case, open another Windows PowerShell with the \u0026ldquo;Run as Administrator\u0026rdquo; option. Then try typing the following command before starting your virtual environment:\n{% filename %}command-line{% endfilename %}\nC:\\WINDOWS\\system32\u0026gt; Set-ExecutionPolicy -ExecutionPolicy RemoteSigned Execution Policy Change The execution policy helps protect you from scripts that you do not trust. Changing the execution policy might expose you to the security risks described in the about_Execution_Policies help topic at http://go.microsoft.com/fwlink/?LinkID=135170. Do you want to change the execution policy? [Y] Yes [A] Yes to All [N] No [L] No to All [S] Suspend [?] Help (default is \u0026quot;N\u0026quot;): A   NOTE: For users of the popular editor VS Code, which come with an integrated terminal based off windows powershell, if you wish to stick with the integrated terminal, you may run the following command to activate your virtual environment:\n$ . myvenv\\Scripts\\activate.ps1 The advantage is that you don\u0026rsquo;t have to switch between editor windows and command-line windows\n Start your virtual environment by running:\n{% filename %}command-line{% endfilename %}\n$ source myvenv/bin/activate Remember to replace myvenv with your chosen virtualenv name!\n NOTE: sometimes source might not be available. In those cases try doing this instead:\n{% filename %}command-line{% endfilename %}\n$ . myvenv/bin/activate  You will know that you have virtualenv started when you see that the prompt in your console is prefixed with (myvenv).\nWhen working within a virtual environment, python will automatically refer to the correct version so you can use python instead of python3.\nOK, we have all important dependencies in place. We can finally install Django!\nInstalling Django #  Now that you have your virtualenv started, you can install Django.\nBefore we do that, we should make sure we have the latest version of pip, the software that we use to install Django:\n{% filename %}command-line{% endfilename %}\n(myvenv) ~$ python -m pip install --upgrade pip Installing packages with requirements #  A requirements file keeps a list of dependencies to be installed using pip install:\nFirst create a requirements.txt file inside of the djangogirls/ folder, using the code editor that you installed earlier. You do this by opening a new file in the code editor and then saving it as requirements.txt in the djangogirls/ folder. Your directory will look like this:\ndjangogirls ├── myvenv │ └── ... └───requirements.txt In your djangogirls/requirements.txt file you should add the following text:\n{% filename %}djangogirls/requirements.txt{% endfilename %}\nDjango~={{ book.django_version }} Now, run pip install -r requirements.txt to install Django.\n{% filename %}command-line{% endfilename %}\n(myvenv) ~$ pip install -r requirements.txt Collecting Django~={{ book.django_version }} (from -r requirements.txt (line 1)) Downloading Django-{{ book.django_version }}-py3-none-any.whl (7.1MB) Installing collected packages: Django Successfully installed Django-{{ book.django_version }}  If you get an error when calling pip on Windows platform, please check if your project pathname contains spaces, accents or special characters (for example, C:\\Users\\User Name\\djangogirls). If it does, please consider using another place without spaces, accents or special characters (suggestion: C:\\djangogirls). Create a new virtualenv in the new directory, then delete the old one and try the above command again. (Moving the virtualenv directory won\u0026rsquo;t work since virtualenv uses absolute paths.)\n  Your command line might freeze after when you try to install Django. If this happens, instead of the above command use:\n{% filename %}command-line{% endfilename %}\nC:\\Users\\Name\\djangogirls\u0026gt; python -m pip install -r requirements.txt   If you get an error when calling pip on Ubuntu 12.04 please run python -m pip install -U --force-reinstall pip to fix the pip installation in the virtualenv.\n That\u0026rsquo;s it! You\u0026rsquo;re now (finally) ready to create a Django application!\n"});index.add({'id':7,'href':'/installation/git/','title':"Git",'section':"Installation",'content':"Git #   Git is a \u0026ldquo;version control system\u0026rdquo; used by a lot of programmers. This software can track changes to files over time so that you can recall specific versions later. A bit like the \u0026ldquo;track changes\u0026rdquo; feature in word processor programs (e.g., Microsoft Word or LibreOffice Writer), but much more powerful.\n Installing Git #  Windows #  You can download Git from git-scm.com. You can hit \u0026ldquo;next\u0026rdquo; on all steps except for two: in the step where it asks to choose your editor, you should pick Nano, and in the step entitled \u0026ldquo;Adjusting your PATH environment\u0026rdquo;, choose \u0026ldquo;Use Git and optional Unix tools from the Windows Command Prompt\u0026rdquo; (the bottom option). Other than that, the defaults are fine. Checkout Windows-style, commit Unix-style line endings is good.\nDo not forget to restart the command prompt or powershell after the installation finished successfully.\nMacOS #  Download Git from git-scm.com and follow the instructions.\n Note If you are running OS X 10.6, 10.7, or 10.8, you will need to install the version of git from here: Git installer for OS X Snow Leopard\n Linux #   Terminal - Debian or Ubuntu\nsudo apt install git Terminal - Fedora\nsudo dnf install git Terminal - openSUSE\nsudo zypper install git Create a GitHub account #  Go to GitHub.com and sign up for a new, free user account. Be sure to remember your password (add it to your password manager, if you use one).\n"});index.add({'id':8,'href':'/installation/pythonanywhere/','title':"PythonAnywhere",'section':"Installation",'content':"PythonAnywhere #  Basics #  PythonAnywhere is a service for running Python code on servers \u0026ldquo;in the cloud\u0026rdquo;. We\u0026rsquo;ll use it for hosting our site, live and on the Internet.\nWe will be hosting the blog we\u0026rsquo;re building on PythonAnywhere. Sign up for a \u0026ldquo;Beginner\u0026rdquo; account on PythonAnywhere (the free tier is fine, you don\u0026rsquo;t need a credit card).\n www.pythonanywhere.com   Note When choosing your username here, bear in mind that your blog\u0026rsquo;s URL will take the form yourusername.pythonanywhere.com, so choose either your own nickname or a name for what your blog is all about. Also, be sure to remember your password (add it to your password manager, if you use one).\n Creating a PythonAnywhere API token #  This is something you only need to do once. When you\u0026rsquo;ve signed up for PythonAnywhere, you\u0026rsquo;ll be taken to your dashboard. Find the link near the top right to your \u0026ldquo;Account\u0026rdquo; page:\nthen select the tab named \u0026ldquo;API token\u0026rdquo;, and hit the button that says \u0026ldquo;Create new API token\u0026rdquo;.\n"});index.add({'id':9,'href':'/how_the_internet_works/','title':"How the internet works",'section':"Welcome",'content':"How the Internet works #   For readers at home: this chapter is covered in the How the Internet Works video.\n  This chapter is inspired by the talk \u0026ldquo;How the Internet works\u0026rdquo; by Jessica McKellar (http://web.mit.edu/jesstess/www/).\n We bet you use the Internet every day. But do you actually know what happens when you type an address like https://djangogirls.org into your browser and press enter?\nThe first thing you need to understand is that a website consists of a bunch of files saved on a hard disk \u0026ndash; just like your movies, music, or pictures. However, there is one part that is unique for websites: they include computer code called HTML.\nIf you\u0026rsquo;re not familiar with programming, it can be hard to grasp HTML at first, but your web browsers (like Chrome, Safari, Firefox, etc.) love it. Web browsers are designed to understand this code, follow its instructions, and present these files that your website is made of, exactly the way you want.\nAs with every file, we need to store HTML files somewhere on a hard disk. For the Internet, we use special, powerful computers called servers. They don\u0026rsquo;t have a screen, mouse or a keyboard, because their main purpose is to store data and serve it. That\u0026rsquo;s why they\u0026rsquo;re called servers – because they serve you data.\nOK, but you want to know how the Internet looks, right?\nWe drew you a picture! It looks like this:\nLooks like a mess, right? In fact it is a network of connected machines (the above-mentioned servers). Hundreds of thousands of machines! Many, many kilometers of cables around the world! You can visit a Submarine Cable Map website (http://submarinecablemap.com) to see how complicated the net is. Here is a screenshot from the website:\nIt is fascinating, isn\u0026rsquo;t it? But it is not possible to have a wire between every machine connected to the Internet. So, to reach a machine (for example, the one where https://djangogirls.org is saved) we need to pass a request through many, many different machines.\nIt looks like this:\nImagine that when you type https://djangogirls.org, you send a letter that says: \u0026ldquo;Dear Django Girls, I want to see the djangogirls.org website. Send it to me, please!\u0026rdquo;\nYour letter goes to the post office closest to you. Then it goes to another that is a bit nearer to your addressee, then to another, and another until it is delivered at its destination. The only unique thing is that if you send many letters (data packets) to the same place, they could go through totally different post offices (routers). This depends on how they are distributed at each office.\nThat\u0026rsquo;s how it works - you send messages and you expect some response. Instead of paper and pen you use bytes of data, but the idea is the same!\nInstead of addresses with a street name, city, zip code and country name, we use IP addresses. Your computer first asks the DNS (Domain Name System) to translate djangogirls.org into an IP address. It works a little bit like old-fashioned phonebooks where you can look up the name of the person you want to contact and find their phone number and address.\nWhen you send a letter, it needs to have certain features to be delivered correctly: an address, a stamp, etc. You also use a language that the receiver understands, right? The same applies to the data packets you send to see a website. We use a protocol called HTTP (Hypertext Transfer Protocol).\nSo, basically, when you have a website, you need to have a server (machine) where it lives. When the server receives an incoming request (in a letter), it sends back your website (in another letter).\nSince this is a Django tutorial, you might ask what Django does. When you send a response, you don\u0026rsquo;t always want to send the same thing to everybody. It is so much better if your letters are personalized, especially for the person that has just written to you, right? Django helps you with creating these personalized, interesting letters. :)\nEnough talk – time to create!\n"});})();